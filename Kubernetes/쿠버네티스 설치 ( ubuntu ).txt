***** 쿠버네티스 설치 ( ubuntu )*****

- 쿠버네티스(우분투)    useradd 계정명
			     passwd 계정명
			     비번 : busanit  
ubuntuVM 
- ubuntu22.04 - desktop
- update && upgrade
- install vim curl net-tools tree ssh
- ip 10.100.202.20/21/22/23 설정(브릿지 NIC에서)
- 여기까지 설정 끝나면 종료후 스냅샷 찍기

파일이름변경(파일이 있는 디렉토리로 이동후) : mv authorized_key authorized_keys    //  authorized_key --> authorized_keys



***************** 쿠버네티스 설치 ( ubuntu )******************

## swap 비활성화
ubuntu@k8s-master:~$ sudo swapoff -a && sudo sed -i '/swap/s/^/#/' /etc/fstab
## 방화벽 비활성화
ubuntu@k8s-master:~$ sudo ntpq -p
## IP 포워딩 활성화
ubuntu@k8s-master:~$ sudo -i
root@k8s-master:~# echo '1' > /proc/sys/net/ipv4/ip_forward   // ip_forward를 1로 만들면 on
root@k8s-master:~# cat /proc/sys/net/ipv4/ip_forward
## containerd (container daemon)를 이용한 container runtime 구성
ubuntu@k8s-master:~$ sudo cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf 
> overlay
> br_netfilter
> EOF
## modprobe 프로그램은 요청된 모듈이 동작할 수 있도록 부수적인 모듈을
## depmod 프로그램을 이용하여 검색해 필요한 모듈을 커널에 차례로 등록한다.
ubuntu@k8s-master:~$ sudo modprobe overlay
ubuntu@k8s-master:~$ sudo modprobe br_netfilter
## 노드간 통신을 위한 iptables에 브릿지 관련 설정을 추가한다.
ubuntu@k8s-master:~$ sudo cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
> net.bridge.bridge-nf-call-iptables = 1
> net.ipv4.ip_forward = 1
> net.bridge.bridge-nf-call-ip6tables = 1
> EOF
ubuntu@k8s-master:~$ sudo cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
> br_netfilter
> EOF
ubuntu@k8s-master:~$ sudo cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
> net.bridge.bridge-nf-call-ip6tables = 1
> net.bridge.bridge-nf-call-iptables = 1
> EOF
## sys 파라미터 적용
ubuntu@k8s-master:~$ sudo sysctl --system

◼ Docker 설치 (Master에서 작업) pdf.1p
## k8s runtime 준비 : contained, docker, CRI-O 중에 선택이고 여기서는 containerd 사용
## apt가 HTTPS로 리포지터리를 사용하는 것을 허용하기 위한 패키지 및 docker에 필요한 패키지 설치
ubuntu@k8s-master:~$ sudo apt-get update -y
ubuntu@k8s-master:~$ sudo apt-get -y install apt-transport-https \
> ca-certificates curl software-properties-common gnupg2
## 도커 공식 GPG 키 추가
※ GPG키 : 패키지가 변조되지 않았다는 것을 보증하는 키  → keyring을 받아서 작업함
ubuntu@k8s-master:~$ sudo install -m 0755 -d /etc/apt/keyrings
ubuntu@k8s-master:~$ sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
> sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
ubuntu@k8s-master:~$ sudo chmod a+r /etc/apt/keyrings/docker.gpg
ubuntu@k8s-master:~$ echo \
> "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
> https://download.docker.com/linux/ubuntu \
> $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
> sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

pdf.2p 
## docker-ce와 관련 도구 및 containerd 설치 - docker version (permission denied가 뜨면 ok) 까지 진행 
## docker-ce와 관련 도구 및 containerd 설치
ubuntu@k8s-master:~$ sudo apt-get install -y docker-ce docker-ce-cli \
> containerd.io docker-buildx-plugin docker-compose-plugin
ubuntu@k8s-master:~$ docker version

## containerd 설정
ubuntu@k8s-master:~$ sudo sh -c "containerd config default > /etc/containerd/config.toml"
ubuntu@k8s-master:~$ sudo vim /etc/containerd/config.toml
disabled_plugin = [ ]                 ## [ ] CRI 제거 확인  ▶  첫번째줄에 [ ]안이 비어있는 것 확인후 
:q!
ubuntu@k8s-master:~$ sudo sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml
                               ▶ ~=false로 된 내용을 ~true로 된 내용에 덮어 쓴다
ubuntu@k8s-master:~$ sudo systemctl restart containerd.service     // container에 등록된 내용을 재시작

## docker daemon 설정
ubuntu@k8s-master:~$ sudo vim /etc/docker/daemon.json
{
"exec-opts": ["native.cgroupdriver=systemd"], 
"log-driver": "json-file",
"log-opts": {
"max-size": "100m"
},
"storage-driver": "overlay2"
}
:wq
ubuntu@k8s-master:~$ sudo mkdir /etc/systemd/system/docker.service.d   
ubuntu@k8s-master:~$ sudo usermod -aG docker ubuntu  
							 // ubuntu 계정을 도커그룹에 추가
ubuntu@k8s-master:~$ sudo systemctl daemon-reload
ubuntu@k8s-master:~$ sudo systemctl enable docker
ubuntu@k8s-master:~$ sudo systemctl restart docker
ubuntu@k8s-master:~$ sudo systemctl status docker
ubuntu@k8s-master:~$ sudo systemctl restart containerd.service
ubuntu@k8s-master:~$ sudo systemctl status containerd.service
ubuntu@k8s-master:~$ sudo reboot
ubuntu@k8s-master:~$ docker version       ▶ server 27.0.3  , containerd 확인
ubuntu@k8s-master:~$ docker info            ▶ container, images = 0

◼ Kubernetes 도구 설치 (Master에서 작업)

## kubernetes 도구 설치 (1.28)
ubuntu@k8s-master:~$ curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

ubuntu@k8s-master:~$ echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

ubuntu@k8s-master:~$ sudo apt update -y
ubuntu@k8s-master:~$ sudo apt-cache policy kubeadm
kubeadm
Installed: (none)
Candidate: 1.28.5-1.1
Version table:
1.28.5-1.1 500
500 https://pkgs.k8s.io/core:/stable:/v1.28/deb Packages
1.28.4-1.1 500
500 https://pkgs.k8s.io/core:/stable:/v1.28/deb Packages
1.28.3-1.1 500
500 https://pkgs.k8s.io/core:/stable:/v1.28/deb Packages
ubuntu@k8s-master:~$ sudo apt install -y kubelet kubeadm kubectl
ubuntu@k8s-master:~$ kubeadm version
ubuntu@m-k8s:~$ kubectl version -o yaml
Client Version: v1.28.5
Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3
The connection to the server localhost:8080 was refused - did you specify the right host or port?
ubuntu@k8s-master:~$ kubectl version
kubernetes v1.28.5

## 설치된 Kubernetes tool이 자동으로 업데이트 되는 것을 방지하기 위해 hold 시킨다.
ubuntu@k8s-master:~$ sudo apt-mark hold kubelet kubeadm kubectl

## 모든 노드에 설치되는 kubelet은 항상 start 상태를 유지해야 한다.
ubuntu@k8s-master:~$ sudo systemctl daemon-reload
ubuntu@k8s-master:~$ sudo systemctl restart kubelet.service
ubuntu@k8s-master:~$ sudo systemctl enable --now kubelet.service

## Master node의 모든 설정이 끝나면 worker node 복제를 위해 shutdown 한다.
ubuntu@k8s-master:~$ sudo vim /etc/hosts
127.0.0.1 localhost
10.100.202.20 k8s-master
10.100.202.21 k8s-node01
10.100.202.22 k8s-node02
10.100.202.23 k8s-node03
ubuntu@k8s-master:~$ sudo shutdown -h now



